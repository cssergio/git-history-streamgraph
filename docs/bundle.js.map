{"version":3,"file":"bundle.js","sources":["../src/transformData.js","../src/index.js"],"sourcesContent":["import {\n  timeParse,\n  utcWeek,\n  utcWeeks,\n  group,\n  stack,\n  extent,\n  stackOffsetWiggle,\n  stackOrderAppearance,\n} from 'd3';\nimport { blur } from 'array-blur';\n\nconst blurRadius = 15;\n\nconst parseDate = timeParse('%Y-%m-%d');\n\nconst layer = (d) => d.repo;\n\nexport const transformData = (data) => {\n  //data = data.filter(d => d.repo !== 'd3');\n  data.forEach((d) => {\n    d.date = utcWeek.floor(\n      parseDate(d.date.split(' ')[0])\n    );\n  });\n\n  // Aggregate by week and repository.\n  const groupedData = group(\n    data,\n    (d) => d.date,\n    layer\n  );\n\n  const layerGroupedData = group(data, layer);\n\n  const layers = Array.from(\n    layerGroupedData.keys()\n  );\n\n  const [start, stop] = extent(\n    data,\n    (d) => d.date\n  );\n  const allWeeks = utcWeeks(start, stop);\n\n  const dataBylayer = new Map();\n\n  for (const layer of layers) {\n    const layerData = allWeeks.map((date) => {\n      const value = groupedData.get(date);\n      const commits = value\n        ? value.get(layer)\n        : null;\n      const commitCount = commits\n        ? commits.length\n        : 0;\n      return commitCount;\n    });\n\n    // Apply smoothing\n    const smoothedLayerData = blur().radius(\n      blurRadius\n    )(layerData);\n\n    dataBylayer.set(layer, smoothedLayerData);\n  }\n\n  const transformedData = [];\n  allWeeks.forEach((date, i) => {\n    const row = { date };\n    for (let layer of layers) {\n      row[layer] = dataBylayer.get(layer)[i];\n    }\n    transformedData.push(row);\n  });\n\n  const stackedData = stack()\n    .offset(stackOffsetWiggle)\n    .order(stackOrderAppearance)\n    .keys(layers)(transformedData);\n\n  return { data, stackedData };\n};\n","import {\n  json,\n  scaleTime,\n  extent,\n  max,\n  min,\n  scaleLinear,\n  area,\n  select,\n  scaleOrdinal,\n  hcl,\n  randomNormal,\n  randomLcg,\n  axisTop,\n  axisBottom,\n  ascending,\n} from 'd3';\nimport { areaLabel } from 'd3-area-label';\nimport { transformData } from './transformData';\n\nconst dataURL =\n  'https://gist.githubusercontent.com/curran/18287ef2c4b64ffba32000aad47c292b/raw/eb2dd48d383f09a70b23dc35c3e8eb7b6c7c31ad/all-d3-commits.json';\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst margin = {\n  top: 20,\n  right: 0,\n  bottom: 20,\n  left: 0,\n};\nconst ticks = 20;\n\nconst innerWidth =\n  width - margin.left - margin.right;\nconst innerHeight =\n  height - margin.top - margin.bottom;\n\nconst xValue = (d) => d.date;\n\nconst render = ({ data, stackedData }) => {\n  const xScale = scaleTime()\n    .domain(extent(data, xValue))\n    .range([0, innerWidth]);\n\n  const yScale = scaleLinear()\n    .domain([\n      min(stackedData, (d) =>\n        min(d, (d) => d[0])\n      ),\n      max(stackedData, (d) =>\n        max(d, (d) => d[1])\n      ),\n    ])\n    .range([innerHeight, 0]);\n\n  const areaGenerator = area()\n    .x((d) => xScale(d.data.date))\n    .y0((d) => yScale(d[0]))\n    .y1((d) => yScale(d[1]));\n\n  const svg = select('body')\n    .append('svg')\n    .attr('width', width)\n    .attr('height', height);\n\n  const g = svg\n    .append('g')\n    .attr(\n      'transform',\n      `translate(${margin.left},${margin.top})`\n    );\n\n  const random = randomNormal.source(\n    randomLcg(0.5)\n  )(30, 10);\n\n  const colorScale = scaleOrdinal().range(\n    stackedData.map((country, i) => {\n      const t = i / stackedData.length;\n      return hcl(t * 360, 50, random());\n    })\n  );\n\n  g.append('g').call(\n    axisTop(xScale)\n      .tickSize(-innerHeight)\n      .tickPadding(6)\n      .ticks(ticks)\n  );\n  g.append('g')\n    .attr(\n      'transform',\n      `translate(0, ${innerHeight})`\n    )\n    .call(\n      axisBottom(xScale)\n        .tickSize(0)\n        .tickPadding(5)\n        .ticks(ticks)\n    )\n    .selectAll('line')\n    .remove();\n\n  // Add a black \"envelope\" as a backdrop behind the layers,\n  // so that we don't get undesirable artifacts where the\n  // tick lines are slightly visible in the cracks between layers.\n  stackedData.sort((a, b) =>\n    ascending(a.index, b.index)\n  );\n  const first = stackedData[0];\n  const last =\n    stackedData[stackedData.length - 1];\n  const outlinePadding = 0.5;\n  const envelope = first.map((d, i) =>\n    Object.assign(\n      [\n        d[0] - outlinePadding,\n        last[i][1] + outlinePadding,\n      ],\n      { data: d.data }\n    )\n  );\n  g.append('path').attr(\n    'd',\n    areaGenerator(envelope)\n  );\n\n  g.append('g')\n    .selectAll('path')\n    .data(stackedData)\n    .enter()\n    .append('a')\n    .attr(\n      'href',\n      (d) => `https://github.com/d3/${d.key}`\n    )\n    .attr('target', '_blank')\n    .append('path')\n    .attr('class', 'area')\n    .attr('d', areaGenerator)\n    .attr('fill', (d) => colorScale(d.key))\n    .append('title')\n    .text((d) => d.key);\n\n  const labels = g\n    .append('g')\n    .selectAll('text')\n    .data(stackedData);\n\n  labels\n    .enter()\n    .append('text')\n    .attr('class', 'area-label')\n    .merge(labels)\n    .text((d) => d.key)\n    .attr('transform', areaLabel(areaGenerator));\n};\n\n// Load the data.\njson(dataURL).then((data) => {\n  render(transformData(data));\n});\n"],"names":["parseDate","timeParse","layer","d","repo","width","window","innerWidth","height","innerHeight","margin","xValue","date","d3","json","then","data","stackedData","xScale","scaleTime","domain","extent","range","yScale","scaleLinear","min","max","areaGenerator","area","x","y0","y1","g","select","append","attr","random","randomNormal","source","randomLcg","colorScale","scaleOrdinal","map","country","i","t","length","hcl","call","axisTop","tickSize","tickPadding","ticks","axisBottom","selectAll","remove","sort","a","b","ascending","index","first","last","envelope","Object","assign","enter","key","text","labels","merge","areaLabel","render","forEach","utcWeek","floor","split","groupedData","group","layerGroupedData","layers","Array","from","keys","start","stop","allWeeks","utcWeeks","dataBylayer","Map","layerData","value","get","commits","smoothedLayerData","blur","radius","set","transformedData","row","push","stack","offset","stackOffsetWiggle","order","stackOrderAppearance","transformData"],"mappings":"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"}